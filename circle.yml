version: 2.1
jobs:
  build:
    docker:
    - image: cimg/base:stable
    environment:
      SOURCE_MAP_SUPPORT: true
      GO111MODULE: "on"
      GO_VERSION: "1.16.5"
      NVM_VERSION: "0.33.9"
      NODE_VERSION: "10.0.0"
      NODE_GYP_VERSION: "5.1.1"
    working_directory: ~/gopherjs
    steps:
    - setup_environment
    - checkout
    - run:
        name: Install required Node.js packages
        command: |
          set -e
          npm install # Install our (dev) dependencies from package.json.
          npm install --global source-map-support # Required by standard library tests.
          npm install --global "node-gyp@${NODE_GYP_VERSION}"
          (cd node-syscall && node-gyp rebuild && mkdir -p $NODE_PATH && cp build/Release/syscall.node "${NODE_PATH}/syscall.node")
    - run: 
        name: Install required Go packages
        command: go get -t -d -v ./...
    - run: 
        name: Install GopherJS
        command: go install -v
    - run:
        name: Check minified prelude
        command: |
          set -e
          go generate github.com/gopherjs/gopherjs/compiler/prelude
          diff -u <(echo -n) <(git status --porcelain)
    - run:
        name: Check gofmt
        command: diff -u <(echo -n) <(gofmt -d .)
    - run: 
        name: Check go vet
        command: |
          set -e  
          # Go package in root directory.
          go vet . 
          # All subdirectories except "doc", "tests", "node*".
          for d in */; do echo ./$d...; done | grep -v ./doc | grep -v ./tests | grep -v ./node | xargs go vet 
    - run:
        name: Check natives build tags
        command: diff -u <(echo -n) <(go list ./compiler/natives/src/...) # All those packages should have // +build js.
    - run:
        name: Smoke tests
        command: |
          gopherjs install -v net/http # Should build successfully.
          gopherjs test -v fmt log # Should catch problems with test execution and source maps.
    - run:
        name: gopherjs test ...
        command: |
          ulimit -s 10000
          gopherjs test --minify -v --short \
            github.com/gopherjs/gopherjs/js/... \
            github.com/gopherjs/gopherjs/tests/... \
            $(GOOS=js GOARCH=wasm go list std | grep -v -x -f .std_test_pkg_exclusions) \
            | tee /tmp/test-gopherjs.txt
          # Convert test output into junit format for CircleCI.
          mkdir -p ~/test-reports/
          go-junit-report < /tmp/test-gopherjs.txt > ~/test-reports/gopherjs.xml
    - run:
        name: go test ...
        command: |
          go test -v -race ./... | tee /tmp/test-go.txt
          # Convert test output into junit format for CircleCI.
          mkdir -p ~/test-reports/
          go-junit-report < /tmp/test-go.txt > ~/test-reports/go.xml
    - store_test_results:
        path: ~/test-reports/
    - run:
        name: TodoMVC in GOPATH mode
        command: |
          set -e
          export GO111MODULE=off
          export GOPATH=/tmp/gopath
          mkdir -p $GOPATH/src
          go get -v github.com/gopherjs/todomvc
          gopherjs build -v -o /tmp/todomvc_gopath.js github.com/gopherjs/todomvc
          gopherjs test -v github.com/gopherjs/todomvc/...
          find $GOPATH
    - run:
        name: TodoMVC in Go Modules mode
        command: |
          set -e  
          export GO111MODULE=on
          export GOPATH=/tmp/gomod
          mkdir -p $GOPATH/src
          cd /tmp
          git clone --depth=1 https://github.com/gopherjs/todomvc.git
          cd /tmp/todomvc
          gopherjs build -v -o /tmp/todomvc_gomod.js github.com/gopherjs/todomvc
          gopherjs test -v github.com/gopherjs/todomvc/...
          find $GOPATH
    - run:
        name: Compare GOPATH and Go Modules output
        command: diff -u <(sed 's/todomvc_gomod.js.map/todomvc_ignored.js.map/' /tmp/todomvc_gomod.js) <(sed 's/todomvc_gopath.js.map/todomvc_ignored.js.map/' /tmp/todomvc_gopath.js)
commands:
  setup_environment:
    description: Set up Go, NVM and Node.js
    steps:
    - run:
        name: Install Go
        command: |
          set -e
          cd /usr/local
          sudo rm -rf go
          curl "https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz" | sudo tar -xz
          echo 'export PATH="$PATH:/usr/local/go/bin:$HOME/go/bin"' >> $BASH_ENV
          . $BASH_ENV
          go get -v github.com/jstemmer/go-junit-report # For CircleCI test reports.
    - run:
        name: Install NVM
        command: |
          set -e
          git clone https://github.com/creationix/nvm $HOME/.nvm
          cd $HOME/.nvm && git checkout "v${NVM_VERSION}"
          echo 'export NVM_DIR="${HOME}/.nvm"' >> "${BASH_ENV}"
          echo '[ -s "${NVM_DIR}/nvm.sh" ] && \. "${NVM_DIR}/nvm.sh"' >> "${BASH_ENV}"
    - run:
        name: Install Node.js
        command: |
          set -e
          nvm install "${NODE_VERSION}" && nvm alias default "${NODE_VERSION}"
          # Make nodejs able to require globally installed modules from any working path.
          echo export "NODE_PATH='$(npm root --global)'" >> "${BASH_ENV}"
